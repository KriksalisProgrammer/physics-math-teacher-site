'use client';

import { useState, useEffect } from 'react';
import { useDictionary } from '@/lib/useDictionary';
import useAuth from '@/hooks/useAuth';
import Card from '@/components/ui/Card';
import Button from '@/components/ui/Button';
import { useNotifications } from '@/hooks/useNotifications';

interface SearchableItem {
  id: string;
  title: string;
  description: string;
  category: 'lesson' | 'news' | 'blog' | 'application';
  tags: string[];
  author: string;
  date: Date;
  status?: 'active' | 'inactive' | 'pending' | 'completed';
}

export default function SearchPage() {
  const { dictionary, locale } = useDictionary();
  const { profile, isAuthenticated } = useAuth();
  const { showInfo } = useNotifications();
  
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState<string>('all');
  const [selectedStatus, setSelectedStatus] = useState<string>('all');
  const [sortBy, setSortBy] = useState<'date' | 'title' | 'author'>('date');
  const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
  const [filteredItems, setFilteredItems] = useState<SearchableItem[]>([]);
  const [allItems, setAllItems] = useState<SearchableItem[]>([]);

  // Mock data
  useEffect(() => {
    const mockItems: SearchableItem[] = [
      {
        id: '1',
        title: '–û—Å–Ω–æ–≤–∏ –º–µ—Ö–∞–Ω—ñ–∫–∏',
        description: '–í–∏–≤—á–µ–Ω–Ω—è –æ—Å–Ω–æ–≤–Ω–∏—Ö –ø—Ä–∏–Ω—Ü–∏–ø—ñ–≤ –∫–ª–∞—Å–∏—á–Ω–æ—ó –º–µ—Ö–∞–Ω—ñ–∫–∏, –∑–∞–∫–æ–Ω—ñ–≤ –ù—å—é—Ç–æ–Ω–∞ —Ç–∞ —ó—Ö –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è',
        category: 'lesson',
        tags: ['—Ñ—ñ–∑–∏–∫–∞', '–º–µ—Ö–∞–Ω—ñ–∫–∞', '–Ω—å—é—Ç–æ–Ω'],
        author: '–Ü–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤–∏—á',
        date: new Date(2025, 5, 10),
        status: 'active'
      },
      {
        id: '2',
        title: '–ö–≤–∞–¥—Ä–∞—Ç–Ω—ñ —Ä—ñ–≤–Ω—è–Ω–Ω—è',
        description: '–ú–µ—Ç–æ–¥–∏ —Ä–æ–∑–≤\'—è–∑—É–≤–∞–Ω–Ω—è –∫–≤–∞–¥—Ä–∞—Ç–Ω–∏—Ö —Ä—ñ–≤–Ω—è–Ω—å —Ç–∞ —ó—Ö –ø—Ä–∞–∫—Ç–∏—á–Ω–µ –∑–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è',
        category: 'lesson',
        tags: ['–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞', '–∞–ª–≥–µ–±—Ä–∞', '—Ä—ñ–≤–Ω—è–Ω–Ω—è'],
        author: '–ú–∞—Ä—ñ—è –Ü–≤–∞–Ω—ñ–≤–Ω–∞',
        date: new Date(2025, 5, 8),
        status: 'active'
      },
      {
        id: '3',
        title: '–ù–æ–≤–∏–Ω–∏ –æ—Å–≤—ñ—Ç–∏',
        description: '–û—Å—Ç–∞–Ω–Ω—ñ –Ω–æ–≤–∏–Ω–∏ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≤ –æ—Å–≤—ñ—Ç–Ω—ñ–π —Å—Ñ–µ—Ä—ñ –£–∫—Ä–∞—ó–Ω–∏',
        category: 'news',
        tags: ['–æ—Å–≤—ñ—Ç–∞', '–Ω–æ–≤–∏–Ω–∏', '—É–∫—Ä–∞—ó–Ω–∞'],
        author: '–†–µ–¥–∞–∫—Ü—ñ—è',
        date: new Date(2025, 5, 12),
        status: 'active'
      },
      {
        id: '4',
        title: '–ó–∞—è–≤–∫–∞ –Ω–∞ –∫—É—Ä—Å —Ñ—ñ–∑–∏–∫–∏',
        description: '–ó–∞—è–≤–∫–∞ –Ω–∞ —É—á–∞—Å—Ç—å –≤ –∫—É—Ä—Å—ñ "–ó–∞–≥–∞–ª—å–Ω–∞ —Ñ—ñ–∑–∏–∫–∞" –¥–ª—è –ø–æ—á–∞—Ç–∫—ñ–≤—Ü—ñ–≤',
        category: 'application',
        tags: ['–∑–∞—è–≤–∫–∞', '—Ñ—ñ–∑–∏–∫–∞', '–∫—É—Ä—Å'],
        author: '–ê–Ω–Ω–∞ –ö–æ–≤–∞–ª–µ–Ω–∫–æ',
        date: new Date(2025, 5, 5),
        status: 'pending'
      },
      {
        id: '5',
        title: '–ï—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –º–µ—Ç–æ–¥–∏ –Ω–∞–≤—á–∞–Ω–Ω—è',
        description: '–ë–ª–æ–≥ –ø—Ä–æ —Å—É—á–∞—Å–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏ –¥–æ –Ω–∞–≤—á–∞–Ω–Ω—è —Ç–∞ –≤–∏–∫–ª–∞–¥–∞–Ω–Ω—è —Ç–æ—á–Ω–∏—Ö –Ω–∞—É–∫',
        category: 'blog',
        tags: ['–º–µ—Ç–æ–¥–∏–∫–∞', '–Ω–∞–≤—á–∞–Ω–Ω—è', '–ø–µ–¥–∞–≥–æ–≥—ñ–∫–∞'],
        author: '–û–ª–µ–≥ –°–∏–¥–æ—Ä–µ–Ω–∫–æ',
        date: new Date(2025, 5, 1),
        status: 'active'
      }
    ];

    setAllItems(mockItems);
    setFilteredItems(mockItems);
  }, []);

  // Filter and search logic
  useEffect(() => {
    let filtered = allItems;

    // Search by query
    if (searchQuery.trim()) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(item =>
        item.title.toLowerCase().includes(query) ||
        item.description.toLowerCase().includes(query) ||
        item.tags.some(tag => tag.toLowerCase().includes(query)) ||
        item.author.toLowerCase().includes(query)
      );
    }

    // Filter by category
    if (selectedCategory !== 'all') {
      filtered = filtered.filter(item => item.category === selectedCategory);
    }

    // Filter by status
    if (selectedStatus !== 'all') {
      filtered = filtered.filter(item => item.status === selectedStatus);
    }

    // Sort
    filtered.sort((a, b) => {
      let comparison = 0;
      
      switch (sortBy) {
        case 'title':
          comparison = a.title.localeCompare(b.title);
          break;
        case 'author':
          comparison = a.author.localeCompare(b.author);
          break;
        case 'date':
        default:
          comparison = a.date.getTime() - b.date.getTime();
          break;
      }
      
      return sortOrder === 'asc' ? comparison : -comparison;
    });

    setFilteredItems(filtered);
  }, [searchQuery, selectedCategory, selectedStatus, sortBy, sortOrder, allItems]);

  const getCategoryIcon = (category: string) => {
    switch (category) {
      case 'lesson':
        return 'üìö';
      case 'news':
        return 'üì∞';
      case 'blog':
        return 'üìù';
      case 'application':
        return 'üìã';
      default:
        return 'üìÑ';
    }
  };

  const getCategoryLabel = (category: string) => {
    switch (category) {
      case 'lesson':
        return '–£—Ä–æ–∫';
      case 'news':
        return '–ù–æ–≤–∏–Ω–∏';
      case 'blog':
        return '–ë–ª–æ–≥';
      case 'application':
        return '–ó–∞—è–≤–∫–∞';
      default:
        return category;
    }
  };

  const getStatusColor = (status?: string) => {
    switch (status) {
      case 'active':
        return 'bg-green-100 text-green-800 border-green-200';
      case 'inactive':
        return 'bg-gray-100 text-gray-800 border-gray-200';
      case 'pending':
        return 'bg-yellow-100 text-yellow-800 border-yellow-200';
      case 'completed':
        return 'bg-blue-100 text-blue-800 border-blue-200';
      default:
        return 'bg-gray-100 text-gray-800 border-gray-200';
    }
  };

  const getStatusLabel = (status?: string) => {
    switch (status) {
      case 'active':
        return '–ê–∫—Ç–∏–≤–Ω–∏–π';
      case 'inactive':
        return '–ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π';
      case 'pending':
        return '–û—á—ñ–∫—É–≤–∞–Ω–Ω—è';
      case 'completed':
        return '–ó–∞–≤–µ—Ä—à–µ–Ω–æ';
      default:
        return status || '–ù–µ–≤—ñ–¥–æ–º–æ';
    }
  };

  const handleSearch = () => {
    showInfo(
      '–ü–æ—à—É–∫ –≤–∏–∫–æ–Ω–∞–Ω–æ',
      `–ó–Ω–∞–π–¥–µ–Ω–æ ${filteredItems.length} —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤`,
      2000
    );
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-white to-purple-50 py-8">
      <div className="container mx-auto px-4">
        <div className="max-w-7xl mx-auto">
          {/* Header */}
          <div className="mb-8">
            <h1 className="text-4xl font-black bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 bg-clip-text text-transparent mb-2">
              üîç –ü–æ—à—É–∫ —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è
            </h1>
            <p className="text-gray-600">
              –ó–Ω–∞–π–¥—ñ—Ç—å –ø–æ—Ç—Ä—ñ–±–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ä–æ–∑—à–∏—Ä–µ–Ω–æ–≥–æ –ø–æ—à—É–∫—É —Ç–∞ —Ñ—ñ–ª—å—Ç—Ä—ñ–≤
            </p>
          </div>

          <div className="grid grid-cols-1 lg:grid-cols-4 gap-8">
            {/* Filters Sidebar */}
            <div className="lg:col-span-1">
              <Card className="p-6 sticky top-4">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">
                  üéõÔ∏è –§—ñ–ª—å—Ç—Ä–∏
                </h3>

                {/* Category Filter */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –ö–∞—Ç–µ–≥–æ—Ä—ñ—è
                  </label>
                  <select
                    value={selectedCategory}
                    onChange={(e) => setSelectedCategory(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">–í—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</option>
                    <option value="lesson">üìö –£—Ä–æ–∫–∏</option>
                    <option value="news">üì∞ –ù–æ–≤–∏–Ω–∏</option>
                    <option value="blog">üìù –ë–ª–æ–≥</option>
                    <option value="application">üìã –ó–∞—è–≤–∫–∏</option>
                  </select>
                </div>

                {/* Status Filter */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°—Ç–∞—Ç—É—Å
                  </label>
                  <select
                    value={selectedStatus}
                    onChange={(e) => setSelectedStatus(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  >
                    <option value="all">–í—Å—ñ —Å—Ç–∞—Ç—É—Å–∏</option>
                    <option value="active">‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π</option>
                    <option value="pending">‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è</option>
                    <option value="completed">‚úîÔ∏è –ó–∞–≤–µ—Ä—à–µ–Ω–æ</option>
                    <option value="inactive">‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π</option>
                  </select>
                </div>

                {/* Sort Options */}
                <div className="mb-6">
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è
                  </label>
                  <select
                    value={sortBy}
                    onChange={(e) => setSortBy(e.target.value as 'date' | 'title' | 'author')}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent mb-2"
                  >
                    <option value="date">üìÖ –ó–∞ –¥–∞—Ç–æ—é</option>
                    <option value="title">üìù –ó–∞ –Ω–∞–∑–≤–æ—é</option>
                    <option value="author">üë§ –ó–∞ –∞–≤—Ç–æ—Ä–æ–º</option>
                  </select>
                  
                  <div className="flex space-x-2">                    <Button
                      onClick={() => setSortOrder('asc')}
                      variant={sortOrder === 'asc' ? 'primary' : 'secondary'}
                      className="flex-1 text-sm"
                    >
                      ‚Üë –ó–∞ –∑—Ä–æ—Å—Ç–∞–Ω–Ω—è–º
                    </Button>
                    <Button
                      onClick={() => setSortOrder('desc')}
                      variant={sortOrder === 'desc' ? 'primary' : 'secondary'}
                      className="flex-1 text-sm"
                    >
                      ‚Üì –ó–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º
                    </Button>
                  </div>
                </div>

                {/* Clear Filters */}
                <Button
                  onClick={() => {
                    setSearchQuery('');
                    setSelectedCategory('all');
                    setSelectedStatus('all');
                    setSortBy('date');
                    setSortOrder('desc');
                  }}
                  variant="secondary"
                  className="w-full"
                >
                  üîÑ –°–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
                </Button>
              </Card>
            </div>

            {/* Search Results */}
            <div className="lg:col-span-3">
              {/* Search Bar */}
              <Card className="p-6 mb-6">
                <div className="flex space-x-4">
                  <div className="flex-1">
                    <input
                      type="text"
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      placeholder="–ü–æ—à—É–∫ –∑–∞ –Ω–∞–∑–≤–æ—é, –æ–ø–∏—Å–æ–º, —Ç–µ–≥–∞–º–∏ –∞–±–æ –∞–≤—Ç–æ—Ä–æ–º..."
                      className="w-full px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                      onKeyPress={(e) => e.key === 'Enter' && handleSearch()}
                    />
                  </div>
                  <Button onClick={handleSearch} className="px-8">
                    üîç –ü–æ—à—É–∫
                  </Button>
                </div>
              </Card>

              {/* Results Count */}
              <div className="mb-6">
                <p className="text-gray-600">
                  –ó–Ω–∞–π–¥–µ–Ω–æ <span className="font-semibold">{filteredItems.length}</span> —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
                  {searchQuery && (
                    <span> –∑–∞ –∑–∞–ø–∏—Ç–æ–º "<span className="font-semibold">{searchQuery}</span>"</span>
                  )}
                </p>
              </div>

              {/* Results */}
              <div className="space-y-4">
                {filteredItems.length > 0 ? (
                  filteredItems.map((item) => (
                    <Card key={item.id} className="p-6 hover:shadow-lg transition-shadow">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex items-center space-x-3">
                          <span className="text-2xl">{getCategoryIcon(item.category)}</span>
                          <div>
                            <h3 className="text-xl font-semibold text-gray-800 mb-1">
                              {item.title}
                            </h3>
                            <div className="flex items-center space-x-4 text-sm text-gray-500">
                              <span>üë§ {item.author}</span>
                              <span>üìÖ {item.date.toLocaleDateString('uk-UA')}</span>
                              <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded">
                                {getCategoryLabel(item.category)}
                              </span>
                            </div>
                          </div>
                        </div>
                        
                        {item.status && (
                          <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(item.status)}`}>
                            {getStatusLabel(item.status)}
                          </span>
                        )}
                      </div>

                      <p className="text-gray-600 mb-4">
                        {item.description}
                      </p>

                      <div className="flex items-center justify-between">
                        <div className="flex flex-wrap gap-2">
                          {item.tags.map((tag) => (
                            <span
                              key={tag}
                              className="bg-gray-100 text-gray-700 px-2 py-1 rounded text-sm"
                            >
                              #{tag}
                            </span>
                          ))}
                        </div>
                        
                        <Button variant="secondary">
                          üìñ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏
                        </Button>
                      </div>
                    </Card>
                  ))
                ) : (
                  <Card className="p-12 text-center">
                    <div className="text-6xl mb-4">üîç</div>
                    <h3 className="text-xl font-semibold text-gray-800 mb-2">
                      –†–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ
                    </h3>
                    <p className="text-gray-600 mb-4">
                      –°–ø—Ä–æ–±—É–π—Ç–µ –∑–º—ñ–Ω–∏—Ç–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –ø–æ—à—É–∫—É –∞–±–æ —Å–∫–∏–Ω—É—Ç–∏ —Ñ—ñ–ª—å—Ç—Ä–∏
                    </p>
                    <Button
                      onClick={() => {
                        setSearchQuery('');
                        setSelectedCategory('all');
                        setSelectedStatus('all');
                      }}
                    >
                      üîÑ –°–∫–∏–Ω—É—Ç–∏ –ø–æ—à—É–∫
                    </Button>
                  </Card>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
