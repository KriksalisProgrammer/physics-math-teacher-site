'use client';

import React, { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import Link from 'next/link';
import { useDictionary } from '@/lib/useDictionary';
import useAuth from '@/hooks/useAuth';
import { useNotifications } from '@/hooks/useNotifications';

export const dynamic = 'force-dynamic';

const StatCard = ({ icon, title, value, description, trend }: {
  icon: string;
  title: string;
  value: string | number;
  description: string;
  trend: { value: number; isPositive: boolean };
}) => (
  <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6 transition-all duration-300 hover:shadow-xl hover:-translate-y-1">
    <div className="flex items-center justify-between mb-4">
      <div className="text-4xl">{icon}</div>
      <div className={`flex items-center space-x-1 text-sm font-medium px-2 py-1 rounded-full ${
        trend.isPositive ? 'bg-green-100 text-green-700' : 'bg-red-100 text-red-700'
      }`}>
        <span>{trend.isPositive ? '‚ÜóÔ∏è' : '‚ÜòÔ∏è'}</span>
        <span>{Math.abs(trend.value)}%</span>
      </div>
    </div>
    <div>
      <h3 className="text-sm font-medium text-gray-600 uppercase tracking-wide mb-1">{title}</h3>
      <div className="text-3xl font-bold text-gray-900 mb-1">{value}</div>
      <div className="text-sm text-gray-500">{description}</div>
    </div>
  </div>
);

const ChartCard = ({ title, data }: {
  title: string;
  data: { label: string; value: number; color: string }[];
}) => (
  <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
    <h3 className="text-xl font-bold text-gray-900 mb-6">{title}</h3>
    <div className="space-y-4">
      {data.map((item, index) => (
        <div key={index} className="flex items-center justify-between">
          <div className="flex items-center space-x-3">
            <div className={`w-4 h-4 rounded-full ${item.color}`}></div>
            <span className="text-gray-700">{item.label}</span>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-32 bg-gray-200 rounded-full h-2">
              <div 
                className={`h-2 rounded-full ${item.color}`}
                style={{ width: `${(item.value / Math.max(...data.map(d => d.value))) * 100}%` }}
              ></div>
            </div>
            <span className="text-sm font-medium text-gray-900 w-8">{item.value}</span>
          </div>
        </div>
      ))}
    </div>
  </div>
);

export default function AdminAnalyticsPage() {
  const { dictionary: dict, locale } = useDictionary();
  const { user, profile, isAuthenticated, loading } = useAuth();
  const { showError } = useNotifications();
  const router = useRouter();
  
  const [selectedPeriod, setSelectedPeriod] = useState('7d'); // 7d, 30d, 90d, 1y
  const [analyticsData, setAnalyticsData] = useState<any>(null);
  const [loadingData, setLoadingData] = useState(true);

  useEffect(() => {
    if (loading) return;
    
    if (!isAuthenticated) {
      router.push(`/${locale}/login`);
      return;
    }    if (profile?.role !== 'admin') {
      showError('–ü–æ–º–∏–ª–∫–∞ –¥–æ—Å—Ç—É–ø—É', '–£ –≤–∞—Å –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏');
      router.push(`/${locale}/dashboard`);
      return;
    }

    loadAnalytics();
  }, [isAuthenticated, profile, loading, locale, router, selectedPeriod]);

  const loadAnalytics = async () => {
    try {
      setLoadingData(true);
      
      // –ú–æ–∫–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const mockData = {
        stats: [
          { icon: 'üë•', title: '–í—Å—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', value: '1,247', description: '–ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∑–∞ –≤–µ—Å—å —á–∞—Å', trend: { value: 12, isPositive: true } },
          { icon: 'üìà', title: '–ê–∫—Ç–∏–≤–Ω–∏—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤', value: '892', description: '–ó–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤', trend: { value: 8, isPositive: true } },
          { icon: 'üìö', title: '–£—Ä–æ–∫—ñ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ', value: '3,456', description: '–ó–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥', trend: { value: 15, isPositive: true } },
          { icon: '‚úÖ', title: '–ó–∞–≤–¥–∞–Ω—å –≤–∏–∫–æ–Ω–∞–Ω–æ', value: '8,923', description: '–£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ', trend: { value: 23, isPositive: true } },
          { icon: '‚≠ê', title: '–°–µ—Ä–µ–¥–Ω—ñ–π —Ä–µ–π—Ç–∏–Ω–≥', value: '4.8', description: '–û—Ü—ñ–Ω–∫–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏', trend: { value: 2, isPositive: true } },
          { icon: 'üí¨', title: '–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å', value: '12,456', description: '–í —á–∞—Ç–∞—Ö —Ç–∞ –∫–æ–º–µ–Ω—Ç–∞—Ä—è—Ö', trend: { value: 18, isPositive: true } }
        ],
        usersByRole: [
          { label: '–°—Ç—É–¥–µ–Ω—Ç–∏', value: 1089, color: 'bg-blue-500' },
          { label: '–í–∏–∫–ª–∞–¥–∞—á—ñ', value: 156, color: 'bg-green-500' },
          { label: '–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏', value: 2, color: 'bg-purple-500' }
        ],
        lessonsBySubject: [
          { label: '–§—ñ–∑–∏–∫–∞', value: 234, color: 'bg-indigo-500' },
          { label: '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞', value: 189, color: 'bg-pink-500' },
          { label: '–ó–∞–≥–∞–ª—å–Ω—ñ', value: 67, color: 'bg-yellow-500' }
        ],
        activityByDay: [
          { label: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫', value: 145, color: 'bg-red-500' },
          { label: '–í—ñ–≤—Ç–æ—Ä–æ–∫', value: 189, color: 'bg-orange-500' },
          { label: '–°–µ—Ä–µ–¥–∞', value: 234, color: 'bg-yellow-500' },
          { label: '–ß–µ—Ç–≤–µ—Ä', value: 198, color: 'bg-green-500' },
          { label: "–ü'—è—Ç–Ω–∏—Ü—è", value: 167, color: 'bg-blue-500' },
          { label: '–°—É–±–æ—Ç–∞', value: 89, color: 'bg-indigo-500' },
          { label: '–ù–µ–¥—ñ–ª—è', value: 56, color: 'bg-purple-500' }
        ],
        recentActivity: [
          { user: '–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ', action: '–ó–∞–≤–µ—Ä—à–∏–≤ —É—Ä–æ–∫ "–ú–µ—Ö–∞–Ω—ñ–∫–∞"', time: '5 —Ö–≤ —Ç–æ–º—É', type: 'lesson' },
          { user: '–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ', action: '–°—Ç–≤–æ—Ä–∏–ª–∞ –Ω–æ–≤–∏–π —Ç–µ—Å—Ç', time: '12 —Ö–≤ —Ç–æ–º—É', type: 'test' },
          { user: '–û–ª–µ–∫—Å–∞–Ω–¥—Ä –°–∏–¥–æ—Ä–µ–Ω–∫–æ', action: '–ó–∞–ª–∏—à–∏–≤ –∫–æ–º–µ–Ω—Ç–∞—Ä', time: '25 —Ö–≤ —Ç–æ–º—É', type: 'comment' },
          { user: '–ö–∞—Ç–µ—Ä–∏–Ω–∞ –Ü–≤–∞–Ω–æ–≤–∞', action: '–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞–ª–∞—Å—å –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ñ', time: '1 –≥–æ–¥ —Ç–æ–º—É', type: 'registration' }
        ]
      };
      
      setAnalyticsData(mockData);
    } catch (error) {
      showError('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è', '–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏');
    } finally {
      setLoadingData(false);
    }
  };

  if (loading || loadingData) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-50 via-white to-purple-50">
        <div className="text-center">
          <div className="w-16 h-16 border-4 border-blue-500 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
          <p className="text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏...</p>
        </div>
      </div>
    );
  }

  const getActivityIcon = (type: string) => {
    switch (type) {
      case 'lesson': return 'üìö';
      case 'test': return 'üìù';
      case 'comment': return 'üí¨';
      case 'registration': return 'üëã';
      default: return 'üìä';
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto px-4 py-8">
        
        {/* Header */}
        <div className="mb-8">
          <div className="flex items-center justify-between">
            <div>
              <h1 className="text-4xl font-bold text-gray-900 mb-2">üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏</h1>
              <p className="text-gray-600">–î–µ—Ç–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∏</p>
            </div>
            <div className="flex items-center space-x-4">
              <select
                value={selectedPeriod}
                onChange={(e) => setSelectedPeriod(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="7d">–û—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤</option>
                <option value="30d">–û—Å—Ç–∞–Ω–Ω—ñ 30 –¥–Ω—ñ–≤</option>
                <option value="90d">–û—Å—Ç–∞–Ω–Ω—ñ 90 –¥–Ω—ñ–≤</option>
                <option value="1y">–û—Å—Ç–∞–Ω–Ω—ñ–π —Ä—ñ–∫</option>
              </select>
              <Link 
                href={`/${locale}/dashboard`}
                className="flex items-center space-x-2 px-4 py-2 bg-gray-100 hover:bg-gray-200 rounded-lg transition-colors"
              >
                <span>‚Üê</span>
                <span>–ù–∞–∑–∞–¥</span>
              </Link>
            </div>
          </div>
        </div>

        {/* Main Statistics */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
          {analyticsData?.stats.map((stat: any, index: number) => (
            <StatCard key={index} {...stat} />
          ))}
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
          
          {/* Users by Role */}
          <ChartCard
            title="üë• –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ –∑–∞ —Ä–æ–ª—è–º–∏"
            data={analyticsData?.usersByRole || []}
          />

          {/* Lessons by Subject */}
          <ChartCard
            title="üìö –£—Ä–æ–∫–∏ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"
            data={analyticsData?.lessonsBySubject || []}
          />
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          
          {/* Activity by Day */}
          <div className="lg:col-span-2">
            <ChartCard
              title="üìà –ê–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –∑–∞ –¥–Ω—è–º–∏ —Ç–∏–∂–Ω—è"
              data={analyticsData?.activityByDay || []}
            />
          </div>

          {/* Recent Activity */}
          <div className="bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
            <h3 className="text-xl font-bold text-gray-900 mb-6">üïí –û—Å—Ç–∞–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å</h3>
            <div className="space-y-4">
              {analyticsData?.recentActivity.map((activity: any, index: number) => (
                <div key={index} className="flex items-start space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors">
                  <div className="text-2xl">{getActivityIcon(activity.type)}</div>
                  <div className="flex-1">
                    <p className="text-sm font-medium text-gray-900">{activity.user}</p>
                    <p className="text-sm text-gray-600">{activity.action}</p>
                    <p className="text-xs text-gray-500">{activity.time}</p>
                  </div>
                </div>
              ))}
            </div>
            <div className="mt-4 pt-4 border-t border-gray-100">
              <Link 
                href={`/${locale}/admin/activity`}
                className="text-sm text-blue-600 hover:text-blue-800 font-medium"
              >
                –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≤—Å—é –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å ‚Üí
              </Link>
            </div>
          </div>
        </div>

        {/* Export Section */}
        <div className="mt-8 bg-white rounded-2xl shadow-lg border border-gray-200 p-6">
          <div className="flex items-center justify-between">
            <div>
              <h3 className="text-xl font-bold text-gray-900 mb-2">üìÑ –ï–∫—Å–ø–æ—Ä—Ç –∑–≤—ñ—Ç—ñ–≤</h3>
              <p className="text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–π—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É</p>
            </div>
            <div className="flex items-center space-x-3">
              <button className="px-4 py-2 bg-green-100 text-green-700 hover:bg-green-200 rounded-lg transition-colors font-medium">
                üìä Excel –∑–≤—ñ—Ç
              </button>
              <button className="px-4 py-2 bg-red-100 text-red-700 hover:bg-red-200 rounded-lg transition-colors font-medium">
                üìÑ PDF –∑–≤—ñ—Ç
              </button>
              <button className="px-4 py-2 bg-blue-100 text-blue-700 hover:bg-blue-200 rounded-lg transition-colors font-medium">
                üìà CSV –¥–∞–Ω—ñ
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}
